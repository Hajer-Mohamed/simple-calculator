
simple_calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000df2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000df2  00000e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  000015d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000efa  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000488  00000000  00000000  000025ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ef  00000000  00000000  00002a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00003364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d2  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000928  00000000  00000000  0000381a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b3 04 	call	0x966	; 0x966 <main>
  8a:	0c 94 f7 06 	jmp	0xdee	; 0xdee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_pin_dir>:

#include <avr/io.h>
#include "std_macros.h"
void set_pin_dir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <set_pin_dir+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <set_pin_dir+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <set_pin_dir+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <set_pin_dir+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <set_pin_dir+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <set_pin_dir+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <set_pin_dir+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <set_pin_dir+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <set_pin_dir+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <set_pin_dir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <set_pin_dir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <set_pin_dir+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <set_pin_dir+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <set_pin_dir+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <set_pin_dir+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <set_pin_dir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <set_pin_dir+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <set_pin_dir+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <set_pin_dir+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <set_pin_dir+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <set_pin_dir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <set_pin_dir+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <set_pin_dir+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <set_pin_dir+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <set_pin_dir+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <set_pin_dir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <set_pin_dir+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <set_pin_dir+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <set_pin_dir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <set_pin_dir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
 1a8:	83 34       	cpi	r24, 0x43	; 67
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
 1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
 1cc:	ba 01       	movw	r22, r20
 1ce:	62 2b       	or	r22, r18
 1d0:	6b bb       	out	0x1b, r22	; 27
 1d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
 206:	ba 01       	movw	r22, r20
 208:	62 2b       	or	r22, r18
 20a:	68 bb       	out	0x18, r22	; 24
 20c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	65 bb       	out	0x15, r22	; 21
 246:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
 25a:	ba 01       	movw	r22, r20
 25c:	60 95       	com	r22
 25e:	62 23       	and	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
 27a:	ba 01       	movw	r22, r20
 27c:	62 2b       	or	r22, r18
 27e:	62 bb       	out	0x12, r22	; 18
 280:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
 294:	ba 01       	movw	r22, r20
 296:	60 95       	com	r22
 298:	62 23       	and	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <DIO_read>:


unsigned char DIO_read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 29e:	82 34       	cpi	r24, 0x42	; 66
 2a0:	f1 f0       	breq	.+60     	; 0x2de <DIO_read+0x40>
 2a2:	83 34       	cpi	r24, 0x43	; 67
 2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_read+0x10>
 2a6:	81 34       	cpi	r24, 0x41	; 65
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_read+0xe>
 2aa:	4f c0       	rjmp	.+158    	; 0x34a <DIO_read+0xac>
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_read+0x1c>
 2ae:	83 34       	cpi	r24, 0x43	; 67
 2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_read+0x64>
 2b2:	84 34       	cpi	r24, 0x44	; 68
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_read+0x1a>
 2b6:	49 c0       	rjmp	.+146    	; 0x34a <DIO_read+0xac>
 2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2ba:	29 b3       	in	r18, 0x19	; 25
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_read+0x2a>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_read+0x26>
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	82 23       	and	r24, r18
 2d0:	93 23       	and	r25, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_read+0x3a>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_read+0x36>
		break;
 2dc:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2de:	26 b3       	in	r18, 0x16	; 22
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_read+0x4e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_read+0x4a>
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 23       	and	r24, r18
 2f4:	93 23       	and	r25, r19
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_read+0x5e>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_read+0x5a>
		break;
 300:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 302:	23 b3       	in	r18, 0x13	; 19
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_read+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_read+0x6e>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_read+0x82>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_read+0x7e>
		break;
 324:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 326:	20 b3       	in	r18, 0x10	; 16
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_read+0x96>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_read+0x92>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	82 23       	and	r24, r18
 33c:	93 23       	and	r25, r19
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_read+0xa6>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_read+0xa2>
		break;
 348:	08 95       	ret
}


unsigned char DIO_read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 34c:	08 95       	ret

0000034e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 34e:	82 34       	cpi	r24, 0x42	; 66
 350:	b9 f0       	breq	.+46     	; 0x380 <DIO_toggle+0x32>
 352:	83 34       	cpi	r24, 0x43	; 67
 354:	18 f4       	brcc	.+6      	; 0x35c <DIO_toggle+0xe>
 356:	81 34       	cpi	r24, 0x41	; 65
 358:	c9 f5       	brne	.+114    	; 0x3cc <DIO_toggle+0x7e>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_toggle+0x18>
 35c:	83 34       	cpi	r24, 0x43	; 67
 35e:	e9 f0       	breq	.+58     	; 0x39a <DIO_toggle+0x4c>
 360:	84 34       	cpi	r24, 0x44	; 68
 362:	a1 f5       	brne	.+104    	; 0x3cc <DIO_toggle+0x7e>
 364:	27 c0       	rjmp	.+78     	; 0x3b4 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 366:	2b b3       	in	r18, 0x1b	; 27
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle+0x26>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle+0x22>
 378:	ba 01       	movw	r22, r20
 37a:	62 27       	eor	r22, r18
 37c:	6b bb       	out	0x1b, r22	; 27
		break;
 37e:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle+0x40>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle+0x3c>
 392:	ba 01       	movw	r22, r20
 394:	62 27       	eor	r22, r18
 396:	68 bb       	out	0x18, r22	; 24
		break;
 398:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 39a:	25 b3       	in	r18, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_toggle+0x5a>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_toggle+0x56>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 27       	eor	r22, r18
 3b0:	65 bb       	out	0x15, r22	; 21
		break;
 3b2:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	ac 01       	movw	r20, r24
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_toggle+0x74>
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_toggle+0x70>
 3c6:	ba 01       	movw	r22, r20
 3c8:	62 27       	eor	r22, r18
 3ca:	62 bb       	out	0x12, r22	; 18
 3cc:	08 95       	ret

000003ce <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3ce:	82 34       	cpi	r24, 0x42	; 66
 3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_set_port_direction+0x1c>
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_set_port_direction+0xe>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_set_port_direction+0x26>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_set_port_direction+0x18>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	39 f0       	breq	.+14     	; 0x3ee <DIO_set_port_direction+0x20>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <DIO_set_port_direction+0x26>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 3e6:	6a bb       	out	0x1a, r22	; 26
		break ;
 3e8:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 3ea:	67 bb       	out	0x17, r22	; 23
		break ;
 3ec:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 3ee:	64 bb       	out	0x14, r22	; 20
		break ;
 3f0:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 3f2:	61 bb       	out	0x11, r22	; 17
 3f4:	08 95       	ret

000003f6 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 3f6:	82 34       	cpi	r24, 0x42	; 66
 3f8:	61 f0       	breq	.+24     	; 0x412 <DIO_write_port+0x1c>
 3fa:	83 34       	cpi	r24, 0x43	; 67
 3fc:	18 f4       	brcc	.+6      	; 0x404 <DIO_write_port+0xe>
 3fe:	81 34       	cpi	r24, 0x41	; 65
 400:	69 f4       	brne	.+26     	; 0x41c <DIO_write_port+0x26>
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_write_port+0x18>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	39 f0       	breq	.+14     	; 0x416 <DIO_write_port+0x20>
 408:	84 34       	cpi	r24, 0x44	; 68
 40a:	41 f4       	brne	.+16     	; 0x41c <DIO_write_port+0x26>
 40c:	06 c0       	rjmp	.+12     	; 0x41a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 40e:	6b bb       	out	0x1b, r22	; 27
		break ;
 410:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 412:	68 bb       	out	0x18, r22	; 24
		break ;
 414:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 416:	65 bb       	out	0x15, r22	; 21
		break ;
 418:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 41a:	62 bb       	out	0x12, r22	; 18
 41c:	08 95       	ret

0000041e <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 41e:	82 34       	cpi	r24, 0x42	; 66
 420:	61 f0       	breq	.+24     	; 0x43a <DIO_read_port+0x1c>
 422:	83 34       	cpi	r24, 0x43	; 67
 424:	18 f4       	brcc	.+6      	; 0x42c <DIO_read_port+0xe>
 426:	81 34       	cpi	r24, 0x41	; 65
 428:	71 f4       	brne	.+28     	; 0x446 <DIO_read_port+0x28>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <DIO_read_port+0x18>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	39 f0       	breq	.+14     	; 0x43e <DIO_read_port+0x20>
 430:	84 34       	cpi	r24, 0x44	; 68
 432:	49 f4       	brne	.+18     	; 0x446 <DIO_read_port+0x28>
 434:	06 c0       	rjmp	.+12     	; 0x442 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 436:	89 b3       	in	r24, 0x19	; 25
		break ;
 438:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 43a:	86 b3       	in	r24, 0x16	; 22
		break ;
 43c:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 43e:	83 b3       	in	r24, 0x13	; 19
		break ;
 440:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 442:	80 b3       	in	r24, 0x10	; 16
		break ;
 444:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 446:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectpullup+0x58>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectpullup+0x10>
 452:	81 34       	cpi	r24, 0x41	; 65
 454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectpullup+0xe>
 456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectpullup+0x104>
 458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectpullup+0x1e>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
 45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectpullup+0x92>
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectpullup+0x1c>
 464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectpullup+0x104>
 466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 46c:	2b b3       	in	r18, 0x1b	; 27
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectpullup+0x30>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectpullup+0x2c>
 47e:	ba 01       	movw	r22, r20
 480:	62 2b       	or	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
 484:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectpullup+0x4a>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectpullup+0x46>
 498:	ba 01       	movw	r22, r20
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
 4a0:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	ac 01       	movw	r20, r24
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectpullup+0x6a>
 4b0:	44 0f       	add	r20, r20
 4b2:	55 1f       	adc	r21, r21
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectpullup+0x66>
 4b8:	ba 01       	movw	r22, r20
 4ba:	62 2b       	or	r22, r18
 4bc:	68 bb       	out	0x18, r22	; 24
 4be:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4c0:	28 b3       	in	r18, 0x18	; 24
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	ac 01       	movw	r20, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectpullup+0x84>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectpullup+0x80>
 4d2:	ba 01       	movw	r22, r20
 4d4:	60 95       	com	r22
 4d6:	62 23       	and	r22, r18
 4d8:	68 bb       	out	0x18, r22	; 24
 4da:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ac 01       	movw	r20, r24
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectpullup+0xa4>
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectpullup+0xa0>
 4f2:	ba 01       	movw	r22, r20
 4f4:	62 2b       	or	r22, r18
 4f6:	65 bb       	out	0x15, r22	; 21
 4f8:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 4fa:	25 b3       	in	r18, 0x15	; 21
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
 50c:	ba 01       	movw	r22, r20
 50e:	60 95       	com	r22
 510:	62 23       	and	r22, r18
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 51a:	22 b3       	in	r18, 0x12	; 18
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0xde>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0xda>
 52c:	ba 01       	movw	r22, r20
 52e:	62 2b       	or	r22, r18
 530:	62 bb       	out	0x12, r22	; 18
 532:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectpullup+0xf8>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectpullup+0xf4>
 546:	ba 01       	movw	r22, r20
 548:	60 95       	com	r22
 54a:	62 23       	and	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret

00000550 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	81 f0       	breq	.+32     	; 0x576 <write_low_nibble+0x26>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	18 f4       	brcc	.+6      	; 0x560 <write_low_nibble+0x10>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	f1 f4       	brne	.+60     	; 0x59a <write_low_nibble+0x4a>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <write_low_nibble+0x1a>
 560:	83 34       	cpi	r24, 0x43	; 67
 562:	79 f0       	breq	.+30     	; 0x582 <write_low_nibble+0x32>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	c9 f4       	brne	.+50     	; 0x59a <write_low_nibble+0x4a>
 568:	12 c0       	rjmp	.+36     	; 0x58e <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 56a:	8b b3       	in	r24, 0x1b	; 27
 56c:	80 7f       	andi	r24, 0xF0	; 240
 56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 570:	8b b3       	in	r24, 0x1b	; 27
 572:	86 2b       	or	r24, r22
 574:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 576:	88 b3       	in	r24, 0x18	; 24
 578:	80 7f       	andi	r24, 0xF0	; 240
 57a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 57c:	88 b3       	in	r24, 0x18	; 24
 57e:	86 2b       	or	r24, r22
 580:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 582:	85 b3       	in	r24, 0x15	; 21
 584:	80 7f       	andi	r24, 0xF0	; 240
 586:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 588:	85 b3       	in	r24, 0x15	; 21
 58a:	86 2b       	or	r24, r22
 58c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 58e:	82 b3       	in	r24, 0x12	; 18
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 594:	82 b3       	in	r24, 0x12	; 18
 596:	68 2b       	or	r22, r24
 598:	62 bb       	out	0x12, r22	; 18
 59a:	08 95       	ret

0000059c <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 59c:	62 95       	swap	r22
 59e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5a0:	82 34       	cpi	r24, 0x42	; 66
 5a2:	81 f0       	breq	.+32     	; 0x5c4 <write_high_nibble+0x28>
 5a4:	83 34       	cpi	r24, 0x43	; 67
 5a6:	18 f4       	brcc	.+6      	; 0x5ae <write_high_nibble+0x12>
 5a8:	81 34       	cpi	r24, 0x41	; 65
 5aa:	f1 f4       	brne	.+60     	; 0x5e8 <write_high_nibble+0x4c>
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <write_high_nibble+0x1c>
 5ae:	83 34       	cpi	r24, 0x43	; 67
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <write_high_nibble+0x34>
 5b2:	84 34       	cpi	r24, 0x44	; 68
 5b4:	c9 f4       	brne	.+50     	; 0x5e8 <write_high_nibble+0x4c>
 5b6:	12 c0       	rjmp	.+36     	; 0x5dc <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	8f 70       	andi	r24, 0x0F	; 15
 5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	86 2b       	or	r24, r22
 5c2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 5c4:	88 b3       	in	r24, 0x18	; 24
 5c6:	8f 70       	andi	r24, 0x0F	; 15
 5c8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5ca:	88 b3       	in	r24, 0x18	; 24
 5cc:	86 2b       	or	r24, r22
 5ce:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 5d0:	85 b3       	in	r24, 0x15	; 21
 5d2:	8f 70       	andi	r24, 0x0F	; 15
 5d4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5d6:	85 b3       	in	r24, 0x15	; 21
 5d8:	86 2b       	or	r24, r22
 5da:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 5dc:	82 b3       	in	r24, 0x12	; 18
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5e2:	82 b3       	in	r24, 0x12	; 18
 5e4:	68 2b       	or	r22, r24
 5e6:	62 bb       	out	0x12, r22	; 18
 5e8:	08 95       	ret

000005ea <keypad_init>:

#include "keypad_driver.h"

void  keypad_init(void)
{
	set_pin_dir(keypad_port,0,1);
 5ea:	84 e4       	ldi	r24, 0x44	; 68
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,1,1);
 5fa:	84 e4       	ldi	r24, 0x44	; 68
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	41 e0       	ldi	r20, 0x01	; 1
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,2,1);
 60a:	84 e4       	ldi	r24, 0x44	; 68
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	62 e0       	ldi	r22, 0x02	; 2
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	41 e0       	ldi	r20, 0x01	; 1
 614:	50 e0       	ldi	r21, 0x00	; 0
 616:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,3,1);
 61a:	84 e4       	ldi	r24, 0x44	; 68
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	63 e0       	ldi	r22, 0x03	; 3
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	41 e0       	ldi	r20, 0x01	; 1
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	
	set_pin_dir(keypad_port,4,0);
 62a:	84 e4       	ldi	r24, 0x44	; 68
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	64 e0       	ldi	r22, 0x04	; 4
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,5,0);
 63a:	84 e4       	ldi	r24, 0x44	; 68
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	65 e0       	ldi	r22, 0x05	; 5
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,6,0);
 64a:	84 e4       	ldi	r24, 0x44	; 68
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	66 e0       	ldi	r22, 0x06	; 6
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(keypad_port,7,0);
 65a:	84 e4       	ldi	r24, 0x44	; 68
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	67 e0       	ldi	r22, 0x07	; 7
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	
	DIO_vconnectpullup(keypad_port,4,1);
 66a:	84 e4       	ldi	r24, 0x44	; 68
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	64 e0       	ldi	r22, 0x04	; 4
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup(keypad_port,5,1);
 67a:	84 e4       	ldi	r24, 0x44	; 68
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	65 e0       	ldi	r22, 0x05	; 5
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	41 e0       	ldi	r20, 0x01	; 1
 684:	50 e0       	ldi	r21, 0x00	; 0
 686:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup(keypad_port,6,1);
 68a:	84 e4       	ldi	r24, 0x44	; 68
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	66 e0       	ldi	r22, 0x06	; 6
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup(keypad_port,7,1);
 69a:	84 e4       	ldi	r24, 0x44	; 68
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	67 e0       	ldi	r22, 0x07	; 7
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
}
 6aa:	08 95       	ret

000006ac <keypad_check_press>:

unsigned char keypad_check_press(void)
{
 6ac:	af 92       	push	r10
 6ae:	bf 92       	push	r11
 6b0:	cf 92       	push	r12
 6b2:	df 92       	push	r13
 6b4:	ef 92       	push	r14
 6b6:	ff 92       	push	r15
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
 6c4:	60 97       	sbiw	r28, 0x10	; 16
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	f8 94       	cli
 6ca:	de bf       	out	0x3e, r29	; 62
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'1','2','3','/'}, {'4','5','6','-'},{'7','8','9','+'},{'*','0','=','A'}};
 6d0:	de 01       	movw	r26, r28
 6d2:	11 96       	adiw	r26, 0x01	; 1
 6d4:	e0 e6       	ldi	r30, 0x60	; 96
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 e1       	ldi	r24, 0x10	; 16
 6da:	01 90       	ld	r0, Z+
 6dc:	0d 92       	st	X+, r0
 6de:	81 50       	subi	r24, 0x01	; 1
 6e0:	e1 f7       	brne	.-8      	; 0x6da <keypad_check_press+0x2e>
 6e2:	ee 24       	eor	r14, r14
 6e4:	ff 24       	eor	r15, r15
	char row , col, x;
	char return_val=not_pressed;
	for(row=0;row<=3;row++)
	{
		DIO_write(keypad_port,0,1);
 6e6:	84 e4       	ldi	r24, 0x44	; 68
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		DIO_write(keypad_port,1,1);
 6f6:	84 e4       	ldi	r24, 0x44	; 68
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	41 e0       	ldi	r20, 0x01	; 1
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		DIO_write(keypad_port,2,1);
 706:	84 e4       	ldi	r24, 0x44	; 68
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	62 e0       	ldi	r22, 0x02	; 2
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		DIO_write(keypad_port,3,1);
 716:	84 e4       	ldi	r24, 0x44	; 68
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	63 e0       	ldi	r22, 0x03	; 3
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	41 e0       	ldi	r20, 0x01	; 1
 720:	50 e0       	ldi	r21, 0x00	; 0
 722:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		
		DIO_write(keypad_port,row,0);
 726:	57 01       	movw	r10, r14
 728:	84 e4       	ldi	r24, 0x44	; 68
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	b7 01       	movw	r22, r14
 72e:	40 e0       	ldi	r20, 0x00	; 0
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 736:	00 e0       	ldi	r16, 0x00	; 0
 738:	10 e0       	ldi	r17, 0x00	; 0
		for(col=0;col<=3;col++)
		{
			x=DIO_read(keypad_port,(col+4));
 73a:	68 01       	movw	r12, r16
	DIO_vconnectpullup(keypad_port,5,1);
	DIO_vconnectpullup(keypad_port,6,1);
	DIO_vconnectpullup(keypad_port,7,1);
}

unsigned char keypad_check_press(void)
 73c:	b8 01       	movw	r22, r16
 73e:	6c 5f       	subi	r22, 0xFC	; 252
 740:	7f 4f       	sbci	r23, 0xFF	; 255
		DIO_write(keypad_port,3,1);
		
		DIO_write(keypad_port,row,0);
		for(col=0;col<=3;col++)
		{
			x=DIO_read(keypad_port,(col+4));
 742:	84 e4       	ldi	r24, 0x44	; 68
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_read>
			if(x==0)
 74a:	88 23       	and	r24, r24
 74c:	61 f4       	brne	.+24     	; 0x766 <keypad_check_press+0xba>
			{
				return_val=arr[row][col];
 74e:	f5 01       	movw	r30, r10
 750:	ee 0f       	add	r30, r30
 752:	ff 1f       	adc	r31, r31
 754:	ee 0f       	add	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	ce 0e       	add	r12, r30
 75a:	df 1e       	adc	r13, r31
 75c:	fe 01       	movw	r30, r28
 75e:	ec 0d       	add	r30, r12
 760:	fd 1d       	adc	r31, r13
 762:	81 81       	ldd	r24, Z+1	; 0x01
 764:	06 c0       	rjmp	.+12     	; 0x772 <keypad_check_press+0xc6>
 766:	0f 5f       	subi	r16, 0xFF	; 255
 768:	1f 4f       	sbci	r17, 0xFF	; 255
		DIO_write(keypad_port,1,1);
		DIO_write(keypad_port,2,1);
		DIO_write(keypad_port,3,1);
		
		DIO_write(keypad_port,row,0);
		for(col=0;col<=3;col++)
 76a:	04 30       	cpi	r16, 0x04	; 4
 76c:	11 05       	cpc	r17, r1
 76e:	29 f7       	brne	.-54     	; 0x73a <keypad_check_press+0x8e>
 770:	11 c0       	rjmp	.+34     	; 0x794 <keypad_check_press+0xe8>
		{
			break;
		}
	}
	return return_val;
 772:	60 96       	adiw	r28, 0x10	; 16
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	1f 91       	pop	r17
 784:	0f 91       	pop	r16
 786:	ff 90       	pop	r15
 788:	ef 90       	pop	r14
 78a:	df 90       	pop	r13
 78c:	cf 90       	pop	r12
 78e:	bf 90       	pop	r11
 790:	af 90       	pop	r10
 792:	08 95       	ret
		if(x==0)
		{
			break;
		}
	}
	return return_val;
 794:	08 94       	sec
 796:	e1 1c       	adc	r14, r1
 798:	f1 1c       	adc	r15, r1
unsigned char keypad_check_press(void)
{
	unsigned char arr[4][4]={{'1','2','3','/'}, {'4','5','6','-'},{'7','8','9','+'},{'*','0','=','A'}};
	char row , col, x;
	char return_val=not_pressed;
	for(row=0;row<=3;row++)
 79a:	84 e0       	ldi	r24, 0x04	; 4
 79c:	e8 16       	cp	r14, r24
 79e:	f1 04       	cpc	r15, r1
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <keypad_check_press+0xf8>
 7a2:	a1 cf       	rjmp	.-190    	; 0x6e6 <keypad_check_press+0x3a>
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	e5 cf       	rjmp	.-54     	; 0x772 <keypad_check_press+0xc6>

000007a8 <enable>:
	#endif
}

static void enable(void)
{
	DIO_write(lcd_control_port,EN,1);
 7a8:	82 e4       	ldi	r24, 0x42	; 66
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	41 e0       	ldi	r20, 0x01	; 1
 7ae:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b2:	8f e9       	ldi	r24, 0x9F	; 159
 7b4:	9f e0       	ldi	r25, 0x0F	; 15
 7b6:	01 97       	sbiw	r24, 0x01	; 1
 7b8:	f1 f7       	brne	.-4      	; 0x7b6 <enable+0xe>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <enable+0x14>
 7bc:	00 00       	nop
	_delay_ms(2);
	DIO_write(lcd_control_port,EN,0);
 7be:	82 e4       	ldi	r24, 0x42	; 66
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 7c8:	8f e9       	ldi	r24, 0x9F	; 159
 7ca:	9f e0       	ldi	r25, 0x0F	; 15
 7cc:	01 97       	sbiw	r24, 0x01	; 1
 7ce:	f1 f7       	brne	.-4      	; 0x7cc <enable+0x24>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <enable+0x2a>
 7d2:	00 00       	nop
	_delay_ms(2);
}
 7d4:	08 95       	ret

000007d6 <LCD_SEND_CMD>:

void LCD_SEND_CMD(char cmd)
{
 7d6:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port(lcd_data_port,cmd);
 7d8:	81 e4       	ldi	r24, 0x41	; 65
 7da:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
	DIO_write(lcd_control_port,RS,0);
 7de:	82 e4       	ldi	r24, 0x42	; 66
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 7e8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <enable>
 7ec:	8f ec       	ldi	r24, 0xCF	; 207
 7ee:	97 e0       	ldi	r25, 0x07	; 7
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <LCD_SEND_CMD+0x1a>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <LCD_SEND_CMD+0x20>
 7f6:	00 00       	nop
	DIO_write(lcd_control_port,RS, 0);
	enable();
	_delay_ms(1);
	#endif
	_delay_ms(1);
}
 7f8:	08 95       	ret

000007fa <LCD_init>:
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	91 ee       	ldi	r25, 0xE1	; 225
 7fe:	a4 e0       	ldi	r26, 0x04	; 4
 800:	81 50       	subi	r24, 0x01	; 1
 802:	90 40       	sbci	r25, 0x00	; 0
 804:	a0 40       	sbci	r26, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <LCD_init+0x6>
 808:	00 c0       	rjmp	.+0      	; 0x80a <LCD_init+0x10>
 80a:	00 00       	nop

void LCD_init(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	set_pin_dir(lcd_data_port,0,1);
 80c:	81 e4       	ldi	r24, 0x41	; 65
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,1,1);
 816:	81 e4       	ldi	r24, 0x41	; 65
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	41 e0       	ldi	r20, 0x01	; 1
 81c:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,2,1);
 820:	81 e4       	ldi	r24, 0x41	; 65
 822:	62 e0       	ldi	r22, 0x02	; 2
 824:	41 e0       	ldi	r20, 0x01	; 1
 826:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,3,1);
 82a:	81 e4       	ldi	r24, 0x41	; 65
 82c:	63 e0       	ldi	r22, 0x03	; 3
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,4,1);
 834:	81 e4       	ldi	r24, 0x41	; 65
 836:	64 e0       	ldi	r22, 0x04	; 4
 838:	41 e0       	ldi	r20, 0x01	; 1
 83a:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,5,1);
 83e:	81 e4       	ldi	r24, 0x41	; 65
 840:	65 e0       	ldi	r22, 0x05	; 5
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,6,1);
 848:	81 e4       	ldi	r24, 0x41	; 65
 84a:	66 e0       	ldi	r22, 0x06	; 6
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_data_port,7,1);
 852:	81 e4       	ldi	r24, 0x41	; 65
 854:	67 e0       	ldi	r22, 0x07	; 7
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_control_port,EN,1);
 85c:	82 e4       	ldi	r24, 0x42	; 66
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_control_port,RW,1);
 866:	82 e4       	ldi	r24, 0x42	; 66
 868:	62 e0       	ldi	r22, 0x02	; 2
 86a:	41 e0       	ldi	r20, 0x01	; 1
 86c:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	set_pin_dir(lcd_control_port,RS,1);
 870:	82 e4       	ldi	r24, 0x42	; 66
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	41 e0       	ldi	r20, 0x01	; 1
 876:	0e 94 49 00 	call	0x92	; 0x92 <set_pin_dir>
	DIO_write(lcd_control_port,RW,0);
 87a:	82 e4       	ldi	r24, 0x42	; 66
 87c:	62 e0       	ldi	r22, 0x02	; 2
 87e:	40 e0       	ldi	r20, 0x00	; 0
 880:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	LCD_SEND_CMD(EIGHT_BITS);
 884:	88 e3       	ldi	r24, 0x38	; 56
 886:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_SEND_CMD>
 88a:	af ec       	ldi	r26, 0xCF	; 207
 88c:	b7 e0       	ldi	r27, 0x07	; 7
 88e:	11 97       	sbiw	r26, 0x01	; 1
 890:	f1 f7       	brne	.-4      	; 0x88e <__stack+0x2f>
 892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
 894:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CURSOR_ON_DISPLAY_ON); 
 896:	8e e0       	ldi	r24, 0x0E	; 14
 898:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_SEND_CMD>
 89c:	8f ec       	ldi	r24, 0xCF	; 207
 89e:	97 e0       	ldi	r25, 0x07	; 7
 8a0:	01 97       	sbiw	r24, 0x01	; 1
 8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x41>
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
 8a6:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CLR_SCREEN);
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_SEND_CMD>
 8ae:	af e1       	ldi	r26, 0x1F	; 31
 8b0:	be e4       	ldi	r27, 0x4E	; 78
 8b2:	11 97       	sbiw	r26, 0x01	; 1
 8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
 8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
 8b8:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(ENTY_MODE);
 8ba:	86 e0       	ldi	r24, 0x06	; 6
 8bc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_SEND_CMD>
 8c0:	8f ec       	ldi	r24, 0xCF	; 207
 8c2:	97 e0       	ldi	r25, 0x07	; 7
 8c4:	01 97       	sbiw	r24, 0x01	; 1
 8c6:	f1 f7       	brne	.-4      	; 0x8c4 <__stack+0x65>
 8c8:	00 c0       	rjmp	.+0      	; 0x8ca <__stack+0x6b>
 8ca:	00 00       	nop
	LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
	LCD_SEND_CMD(ENTY_MODE);
	_delay_ms(1);
	#endif
}
 8cc:	08 95       	ret

000008ce <LCD_SEND_CHAR>:
	_delay_ms(1);
}


void LCD_SEND_CHAR(char data)
{
 8ce:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port(lcd_data_port,data);
 8d0:	81 e4       	ldi	r24, 0x41	; 65
 8d2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
	DIO_write(lcd_control_port,RS,1);
 8d6:	82 e4       	ldi	r24, 0x42	; 66
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	41 e0       	ldi	r20, 0x01	; 1
 8dc:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 8e0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <enable>
 8e4:	8f ec       	ldi	r24, 0xCF	; 207
 8e6:	97 e0       	ldi	r25, 0x07	; 7
 8e8:	01 97       	sbiw	r24, 0x01	; 1
 8ea:	f1 f7       	brne	.-4      	; 0x8e8 <LCD_SEND_CHAR+0x1a>
 8ec:	00 c0       	rjmp	.+0      	; 0x8ee <LCD_SEND_CHAR+0x20>
 8ee:	00 00       	nop
	enable();
	_delay_ms(1);
	#endif

	_delay_ms(1);
}
 8f0:	08 95       	ret

000008f2 <LCD_SEND_STRING>:

void LCD_SEND_STRING(char *data)
{
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 8f8:	88 81       	ld	r24, Y
 8fa:	88 23       	and	r24, r24
 8fc:	31 f0       	breq	.+12     	; 0x90a <LCD_SEND_STRING+0x18>
	#endif

	_delay_ms(1);
}

void LCD_SEND_STRING(char *data)
 8fe:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_SEND_CHAR(*data);
 900:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
	_delay_ms(1);
}

void LCD_SEND_STRING(char *data)
{
	while((*data)!='\0')
 904:	89 91       	ld	r24, Y+
 906:	88 23       	and	r24, r24
 908:	d9 f7       	brne	.-10     	; 0x900 <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
}
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	08 95       	ret

00000910 <LCD_clearscreen>:

void LCD_clearscreen()
{
	LCD_SEND_CMD(CLR_SCREEN);
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_SEND_CMD>
 916:	8f e1       	ldi	r24, 0x1F	; 31
 918:	9e e4       	ldi	r25, 0x4E	; 78
 91a:	01 97       	sbiw	r24, 0x01	; 1
 91c:	f1 f7       	brne	.-4      	; 0x91a <LCD_clearscreen+0xa>
 91e:	00 c0       	rjmp	.+0      	; 0x920 <LCD_clearscreen+0x10>
 920:	00 00       	nop
	_delay_ms(10);
}
 922:	08 95       	ret

00000924 <LCD_MOVE_CURSOR>:

void LCD_MOVE_CURSOR(char row , char col)
{
	char data;
	if(row<1 || row>2 || col<1 || col>16)
 924:	28 2f       	mov	r18, r24
 926:	21 50       	subi	r18, 0x01	; 1
 928:	22 30       	cpi	r18, 0x02	; 2
 92a:	70 f4       	brcc	.+28     	; 0x948 <LCD_MOVE_CURSOR+0x24>
 92c:	66 23       	and	r22, r22
 92e:	71 f0       	breq	.+28     	; 0x94c <LCD_MOVE_CURSOR+0x28>
 930:	61 31       	cpi	r22, 0x11	; 17
 932:	70 f4       	brcc	.+28     	; 0x950 <LCD_MOVE_CURSOR+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	19 f4       	brne	.+6      	; 0x93e <LCD_MOVE_CURSOR+0x1a>
	{
		data=0x80+col-1;
 938:	96 2f       	mov	r25, r22
 93a:	91 58       	subi	r25, 0x81	; 129
 93c:	0a c0       	rjmp	.+20     	; 0x952 <LCD_MOVE_CURSOR+0x2e>
	}
	else if(row==2)
 93e:	82 30       	cpi	r24, 0x02	; 2
 940:	41 f4       	brne	.+16     	; 0x952 <LCD_MOVE_CURSOR+0x2e>
	{
		data=0xc0+col-1;
 942:	96 2f       	mov	r25, r22
 944:	91 54       	subi	r25, 0x41	; 65
 946:	05 c0       	rjmp	.+10     	; 0x952 <LCD_MOVE_CURSOR+0x2e>
void LCD_MOVE_CURSOR(char row , char col)
{
	char data;
	if(row<1 || row>2 || col<1 || col>16)
	{
		data=0x80;
 948:	90 e8       	ldi	r25, 0x80	; 128
 94a:	03 c0       	rjmp	.+6      	; 0x952 <LCD_MOVE_CURSOR+0x2e>
 94c:	90 e8       	ldi	r25, 0x80	; 128
 94e:	01 c0       	rjmp	.+2      	; 0x952 <LCD_MOVE_CURSOR+0x2e>
 950:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row==2)
	{
		data=0xc0+col-1;
	}
	LCD_SEND_CMD(data);
 952:	89 2f       	mov	r24, r25
 954:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_SEND_CMD>
 958:	8f ec       	ldi	r24, 0xCF	; 207
 95a:	97 e0       	ldi	r25, 0x07	; 7
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <LCD_MOVE_CURSOR+0x38>
 960:	00 c0       	rjmp	.+0      	; 0x962 <LCD_MOVE_CURSOR+0x3e>
 962:	00 00       	nop
	_delay_ms(1);
}
 964:	08 95       	ret

00000966 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "keypad_driver.h"
#include "LCD.h"
int main(void)
{
 966:	cf 93       	push	r28
 968:	df 93       	push	r29
 96a:	00 d0       	rcall	.+0      	; 0x96c <main+0x6>
 96c:	00 d0       	rcall	.+0      	; 0x96e <main+0x8>
 96e:	00 d0       	rcall	.+0      	; 0x970 <main+0xa>
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62
	label: LCD_init();
	keypad_init();
	unsigned char arr[6]={not_pressed,not_pressed,not_pressed,not_pressed,not_pressed,not_pressed};
 974:	0f 2e       	mov	r0, r31
 976:	f0 e7       	ldi	r31, 0x70	; 112
 978:	6f 2e       	mov	r6, r31
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	7f 2e       	mov	r7, r31
 97e:	f0 2d       	mov	r31, r0
 980:	0f 2e       	mov	r0, r31
 982:	f6 e0       	ldi	r31, 0x06	; 6
 984:	af 2e       	mov	r10, r31
 986:	f0 2d       	mov	r31, r0
					LCD_SEND_CHAR((result/10)%10+48);
					LCD_SEND_CHAR((result%10)+48);
			   }
			   else if(result>=10&&result<100)
			   {
				   LCD_SEND_CHAR((result/10)+48);
 988:	0f 2e       	mov	r0, r31
 98a:	fa e0       	ldi	r31, 0x0A	; 10
 98c:	8f 2e       	mov	r8, r31
 98e:	99 24       	eor	r9, r9
 990:	f0 2d       	mov	r31, r0
		   {
			   case '+':
			   result=(arr[counter-3]-48)+(arr[counter-1]-48);
			   if(result>=100&&result<1000)
			   {
				   LCD_SEND_CHAR((result/100)+48);
 992:	0f 2e       	mov	r0, r31
 994:	f4 e6       	ldi	r31, 0x64	; 100
 996:	2f 2e       	mov	r2, r31
 998:	33 24       	eor	r3, r3
 99a:	f0 2d       	mov	r31, r0
#include <util/delay.h>
#include "keypad_driver.h"
#include "LCD.h"
int main(void)
{
	label: LCD_init();
 99c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_init>
	keypad_init();
 9a0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <keypad_init>
	unsigned char arr[6]={not_pressed,not_pressed,not_pressed,not_pressed,not_pressed,not_pressed};
 9a4:	fe 01       	movw	r30, r28
 9a6:	31 96       	adiw	r30, 0x01	; 1
 9a8:	d3 01       	movw	r26, r6
 9aa:	8a 2d       	mov	r24, r10
 9ac:	0d 90       	ld	r0, X+
 9ae:	01 92       	st	Z+, r0
 9b0:	81 50       	subi	r24, 0x01	; 1
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <main+0x46>
	unsigned short result;
	unsigned char counter=0;
 9b4:	bb 24       	eor	r11, r11
				   LCD_SEND_CHAR((result)+48);
			   }
			   break;
			   
			   case '-':
			   result=(arr[counter-3]-48)-(arr[counter-1]-48);
 9b6:	0f 2e       	mov	r0, r31
 9b8:	f0 e3       	ldi	r31, 0x30	; 48
 9ba:	4f 2e       	mov	r4, r31
 9bc:	55 24       	eor	r5, r5
 9be:	f0 2d       	mov	r31, r0
	unsigned char counter=0;
    while(1)
    {
       do
	   {
		   arr[counter]=keypad_check_press();
 9c0:	0e 94 56 03 	call	0x6ac	; 0x6ac <keypad_check_press>
 9c4:	e1 e0       	ldi	r30, 0x01	; 1
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	ec 0f       	add	r30, r28
 9ca:	fd 1f       	adc	r31, r29
 9cc:	eb 0d       	add	r30, r11
 9ce:	f1 1d       	adc	r31, r1
 9d0:	80 83       	st	Z, r24
		   
	   }while(arr[counter]==not_pressed);
 9d2:	8f 3f       	cpi	r24, 0xFF	; 255
 9d4:	a9 f3       	breq	.-22     	; 0x9c0 <main+0x5a>
	   if(arr[counter]=='A' || arr[counter]=='=' ||arr[counter]=='+' ||arr[counter]=='-' ||arr[counter]=='/' ||arr[counter]=='*')
 9d6:	81 34       	cpi	r24, 0x41	; 65
 9d8:	51 f0       	breq	.+20     	; 0x9ee <main+0x88>
 9da:	8d 33       	cpi	r24, 0x3D	; 61
 9dc:	41 f0       	breq	.+16     	; 0x9ee <main+0x88>
 9de:	8b 32       	cpi	r24, 0x2B	; 43
 9e0:	31 f0       	breq	.+12     	; 0x9ee <main+0x88>
 9e2:	8d 32       	cpi	r24, 0x2D	; 45
 9e4:	21 f0       	breq	.+8      	; 0x9ee <main+0x88>
 9e6:	8f 32       	cpi	r24, 0x2F	; 47
 9e8:	11 f0       	breq	.+4      	; 0x9ee <main+0x88>
 9ea:	8a 32       	cpi	r24, 0x2A	; 42
 9ec:	19 f4       	brne	.+6      	; 0x9f4 <main+0x8e>
	   {
			LCD_clearscreen();
 9ee:	0e 94 88 04 	call	0x910	; 0x910 <LCD_clearscreen>
			goto label; 
 9f2:	d4 cf       	rjmp	.-88     	; 0x99c <main+0x36>
	   }
	   else
	   {
		   LCD_SEND_CHAR(arr[counter]);
 9f4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
	   }
	   counter++;
 9f8:	8b 2d       	mov	r24, r11
 9fa:	8f 5f       	subi	r24, 0xFF	; 255
 9fc:	2f ef       	ldi	r18, 0xFF	; 255
 9fe:	34 e3       	ldi	r19, 0x34	; 52
 a00:	4c e0       	ldi	r20, 0x0C	; 12
 a02:	21 50       	subi	r18, 0x01	; 1
 a04:	30 40       	sbci	r19, 0x00	; 0
 a06:	40 40       	sbci	r20, 0x00	; 0
 a08:	e1 f7       	brne	.-8      	; 0xa02 <main+0x9c>
 a0a:	00 c0       	rjmp	.+0      	; 0xa0c <main+0xa6>
 a0c:	00 00       	nop
	   _delay_ms(500);  
	   
	   do 
	   {
		   arr[counter]=keypad_check_press();
 a0e:	01 e0       	ldi	r16, 0x01	; 1
 a10:	10 e0       	ldi	r17, 0x00	; 0
 a12:	0c 0f       	add	r16, r28
 a14:	1d 1f       	adc	r17, r29
 a16:	08 0f       	add	r16, r24
 a18:	11 1d       	adc	r17, r1
 a1a:	0e 94 56 03 	call	0x6ac	; 0x6ac <keypad_check_press>
 a1e:	d8 01       	movw	r26, r16
 a20:	8c 93       	st	X, r24
		   
	   } while (arr[counter]==not_pressed);
 a22:	8f 3f       	cpi	r24, 0xFF	; 255
 a24:	d1 f3       	breq	.-12     	; 0xa1a <main+0xb4>
	   if(arr[counter]=='A' || arr[counter]=='=')
 a26:	81 34       	cpi	r24, 0x41	; 65
 a28:	11 f0       	breq	.+4      	; 0xa2e <main+0xc8>
 a2a:	8d 33       	cpi	r24, 0x3D	; 61
 a2c:	19 f4       	brne	.+6      	; 0xa34 <main+0xce>
	   {
		   LCD_clearscreen();
 a2e:	0e 94 88 04 	call	0x910	; 0x910 <LCD_clearscreen>
		   goto label;
 a32:	b4 cf       	rjmp	.-152    	; 0x99c <main+0x36>
	   }		
	   else
	   {
		   LCD_SEND_CHAR(arr[counter]);
 a34:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
	   }		
	   counter++;
 a38:	8b 2d       	mov	r24, r11
 a3a:	8e 5f       	subi	r24, 0xFE	; 254
 a3c:	2f ef       	ldi	r18, 0xFF	; 255
 a3e:	34 e3       	ldi	r19, 0x34	; 52
 a40:	4c e0       	ldi	r20, 0x0C	; 12
 a42:	21 50       	subi	r18, 0x01	; 1
 a44:	30 40       	sbci	r19, 0x00	; 0
 a46:	40 40       	sbci	r20, 0x00	; 0
 a48:	e1 f7       	brne	.-8      	; 0xa42 <main+0xdc>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <main+0xe6>
 a4c:	00 00       	nop
	   _delay_ms(500);
	   do 
	   {
		   arr[counter]=keypad_check_press();
 a4e:	01 e0       	ldi	r16, 0x01	; 1
 a50:	10 e0       	ldi	r17, 0x00	; 0
 a52:	0c 0f       	add	r16, r28
 a54:	1d 1f       	adc	r17, r29
 a56:	08 0f       	add	r16, r24
 a58:	11 1d       	adc	r17, r1
 a5a:	0e 94 56 03 	call	0x6ac	; 0x6ac <keypad_check_press>
 a5e:	d8 01       	movw	r26, r16
 a60:	8c 93       	st	X, r24
		   
	   } while (arr[counter]==not_pressed);
 a62:	8f 3f       	cpi	r24, 0xFF	; 255
 a64:	d1 f3       	breq	.-12     	; 0xa5a <main+0xf4>
	   if(arr[counter]=='A' || arr[counter]=='=' ||arr[counter]=='+' ||arr[counter]=='-' ||arr[counter]=='/' ||arr[counter]=='*')
 a66:	81 34       	cpi	r24, 0x41	; 65
 a68:	51 f0       	breq	.+20     	; 0xa7e <main+0x118>
 a6a:	8d 33       	cpi	r24, 0x3D	; 61
 a6c:	41 f0       	breq	.+16     	; 0xa7e <main+0x118>
 a6e:	8b 32       	cpi	r24, 0x2B	; 43
 a70:	31 f0       	breq	.+12     	; 0xa7e <main+0x118>
 a72:	8d 32       	cpi	r24, 0x2D	; 45
 a74:	21 f0       	breq	.+8      	; 0xa7e <main+0x118>
 a76:	8f 32       	cpi	r24, 0x2F	; 47
 a78:	11 f0       	breq	.+4      	; 0xa7e <main+0x118>
 a7a:	8a 32       	cpi	r24, 0x2A	; 42
 a7c:	19 f4       	brne	.+6      	; 0xa84 <main+0x11e>
	   {
		   LCD_clearscreen();
 a7e:	0e 94 88 04 	call	0x910	; 0x910 <LCD_clearscreen>
		   goto label;
 a82:	8c cf       	rjmp	.-232    	; 0x99c <main+0x36>
	   }		
	   else
	   {
		   LCD_SEND_CHAR(arr[counter]);
 a84:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
	   }	
	   counter++;
 a88:	b3 e0       	ldi	r27, 0x03	; 3
 a8a:	bb 0e       	add	r11, r27
 a8c:	2f ef       	ldi	r18, 0xFF	; 255
 a8e:	34 e3       	ldi	r19, 0x34	; 52
 a90:	4c e0       	ldi	r20, 0x0C	; 12
 a92:	21 50       	subi	r18, 0x01	; 1
 a94:	30 40       	sbci	r19, 0x00	; 0
 a96:	40 40       	sbci	r20, 0x00	; 0
 a98:	e1 f7       	brne	.-8      	; 0xa92 <main+0x12c>
 a9a:	00 c0       	rjmp	.+0      	; 0xa9c <main+0x136>
 a9c:	00 00       	nop
	   _delay_ms(500);
	   
	   do 
	   {
		   arr[counter]=keypad_check_press();
 a9e:	eb 2c       	mov	r14, r11
 aa0:	ff 24       	eor	r15, r15
 aa2:	01 e0       	ldi	r16, 0x01	; 1
 aa4:	10 e0       	ldi	r17, 0x00	; 0
 aa6:	0c 0f       	add	r16, r28
 aa8:	1d 1f       	adc	r17, r29
 aaa:	0e 0d       	add	r16, r14
 aac:	1f 1d       	adc	r17, r15
 aae:	0e 94 56 03 	call	0x6ac	; 0x6ac <keypad_check_press>
 ab2:	d8 01       	movw	r26, r16
 ab4:	8c 93       	st	X, r24
	   } while (arr[counter]==not_pressed);
 ab6:	8f 3f       	cpi	r24, 0xFF	; 255
 ab8:	d1 f3       	breq	.-12     	; 0xaae <main+0x148>
	   if(arr[counter]=='=')
 aba:	8d 33       	cpi	r24, 0x3D	; 61
 abc:	09 f0       	breq	.+2      	; 0xac0 <main+0x15a>
 abe:	63 c1       	rjmp	.+710    	; 0xd86 <main+0x420>
	   {
		   LCD_SEND_CHAR(arr[counter]);
 ac0:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
		   
		   switch(arr[counter-2])
 ac4:	ef ef       	ldi	r30, 0xFF	; 255
 ac6:	ff ef       	ldi	r31, 0xFF	; 255
 ac8:	ec 0f       	add	r30, r28
 aca:	fd 1f       	adc	r31, r29
 acc:	ee 0d       	add	r30, r14
 ace:	ff 1d       	adc	r31, r15
 ad0:	80 81       	ld	r24, Z
 ad2:	8b 32       	cpi	r24, 0x2B	; 43
 ad4:	69 f0       	breq	.+26     	; 0xaf0 <main+0x18a>
 ad6:	8c 32       	cpi	r24, 0x2C	; 44
 ad8:	20 f4       	brcc	.+8      	; 0xae2 <main+0x17c>
 ada:	8a 32       	cpi	r24, 0x2A	; 42
 adc:	09 f0       	breq	.+2      	; 0xae0 <main+0x17a>
 ade:	56 c1       	rjmp	.+684    	; 0xd8c <main+0x426>
 ae0:	a4 c0       	rjmp	.+328    	; 0xc2a <main+0x2c4>
 ae2:	8d 32       	cpi	r24, 0x2D	; 45
 ae4:	09 f4       	brne	.+2      	; 0xae8 <main+0x182>
 ae6:	51 c0       	rjmp	.+162    	; 0xb8a <main+0x224>
 ae8:	8f 32       	cpi	r24, 0x2F	; 47
 aea:	09 f0       	breq	.+2      	; 0xaee <main+0x188>
 aec:	4f c1       	rjmp	.+670    	; 0xd8c <main+0x426>
 aee:	fd c0       	rjmp	.+506    	; 0xcea <main+0x384>
		   {
			   case '+':
			   result=(arr[counter-3]-48)+(arr[counter-1]-48);
 af0:	ee ef       	ldi	r30, 0xFE	; 254
 af2:	ff ef       	ldi	r31, 0xFF	; 255
 af4:	ec 0f       	add	r30, r28
 af6:	fd 1f       	adc	r31, r29
 af8:	ee 0d       	add	r30, r14
 afa:	ff 1d       	adc	r31, r15
 afc:	20 81       	ld	r18, Z
 afe:	fe 01       	movw	r30, r28
 b00:	ee 0d       	add	r30, r14
 b02:	ff 1d       	adc	r31, r15
 b04:	80 81       	ld	r24, Z
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	82 0f       	add	r24, r18
 b0a:	91 1d       	adc	r25, r1
 b0c:	8c 01       	movw	r16, r24
 b0e:	00 56       	subi	r16, 0x60	; 96
 b10:	10 40       	sbci	r17, 0x00	; 0
			   if(result>=100&&result<1000)
 b12:	c8 01       	movw	r24, r16
 b14:	84 56       	subi	r24, 0x64	; 100
 b16:	90 40       	sbci	r25, 0x00	; 0
 b18:	b3 e0       	ldi	r27, 0x03	; 3
 b1a:	84 38       	cpi	r24, 0x84	; 132
 b1c:	9b 07       	cpc	r25, r27
 b1e:	c8 f4       	brcc	.+50     	; 0xb52 <main+0x1ec>
			   {
				   LCD_SEND_CHAR((result/100)+48);
 b20:	c8 01       	movw	r24, r16
 b22:	b1 01       	movw	r22, r2
 b24:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 b28:	86 2f       	mov	r24, r22
 b2a:	80 5d       	subi	r24, 0xD0	; 208
 b2c:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
					LCD_SEND_CHAR((result/10)%10+48);
 b30:	c8 01       	movw	r24, r16
 b32:	b4 01       	movw	r22, r8
 b34:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 b38:	08 2f       	mov	r16, r24
 b3a:	cb 01       	movw	r24, r22
 b3c:	b4 01       	movw	r22, r8
 b3e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 b42:	80 5d       	subi	r24, 0xD0	; 208
 b44:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
					LCD_SEND_CHAR((result%10)+48);
 b48:	80 2f       	mov	r24, r16
 b4a:	80 5d       	subi	r24, 0xD0	; 208
 b4c:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 b50:	1d c1       	rjmp	.+570    	; 0xd8c <main+0x426>
			   }
			   else if(result>=10&&result<100)
 b52:	c8 01       	movw	r24, r16
 b54:	0a 97       	sbiw	r24, 0x0a	; 10
 b56:	8a 35       	cpi	r24, 0x5A	; 90
 b58:	91 05       	cpc	r25, r1
 b5a:	70 f4       	brcc	.+28     	; 0xb78 <main+0x212>
			   {
				   LCD_SEND_CHAR((result/10)+48);
 b5c:	c8 01       	movw	r24, r16
 b5e:	b4 01       	movw	r22, r8
 b60:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 b64:	08 2f       	mov	r16, r24
 b66:	86 2f       	mov	r24, r22
 b68:	80 5d       	subi	r24, 0xD0	; 208
 b6a:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result%10)+48);
 b6e:	80 2f       	mov	r24, r16
 b70:	80 5d       	subi	r24, 0xD0	; 208
 b72:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 b76:	0a c1       	rjmp	.+532    	; 0xd8c <main+0x426>
			   }
			   else if(result <10)
 b78:	0a 30       	cpi	r16, 0x0A	; 10
 b7a:	11 05       	cpc	r17, r1
 b7c:	08 f0       	brcs	.+2      	; 0xb80 <main+0x21a>
 b7e:	06 c1       	rjmp	.+524    	; 0xd8c <main+0x426>
			   {
				   LCD_SEND_CHAR((result)+48);
 b80:	80 2f       	mov	r24, r16
 b82:	80 5d       	subi	r24, 0xD0	; 208
 b84:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 b88:	01 c1       	rjmp	.+514    	; 0xd8c <main+0x426>
			   }
			   break;
			   
			   case '-':
			   result=(arr[counter-3]-48)-(arr[counter-1]-48);
 b8a:	ee ef       	ldi	r30, 0xFE	; 254
 b8c:	ff ef       	ldi	r31, 0xFF	; 255
 b8e:	ec 0f       	add	r30, r28
 b90:	fd 1f       	adc	r31, r29
 b92:	ee 0d       	add	r30, r14
 b94:	ff 1d       	adc	r31, r15
 b96:	80 81       	ld	r24, Z
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	8c 01       	movw	r16, r24
 b9c:	00 53       	subi	r16, 0x30	; 48
 b9e:	10 40       	sbci	r17, 0x00	; 0
 ba0:	fe 01       	movw	r30, r28
 ba2:	ee 0d       	add	r30, r14
 ba4:	ff 1d       	adc	r31, r15
 ba6:	80 81       	ld	r24, Z
 ba8:	f2 01       	movw	r30, r4
 baa:	e8 1b       	sub	r30, r24
 bac:	f1 09       	sbc	r31, r1
 bae:	0e 0f       	add	r16, r30
 bb0:	1f 1f       	adc	r17, r31
			   if(result>=100&&result<1000)
 bb2:	c8 01       	movw	r24, r16
 bb4:	84 56       	subi	r24, 0x64	; 100
 bb6:	90 40       	sbci	r25, 0x00	; 0
 bb8:	f3 e0       	ldi	r31, 0x03	; 3
 bba:	84 38       	cpi	r24, 0x84	; 132
 bbc:	9f 07       	cpc	r25, r31
 bbe:	c8 f4       	brcc	.+50     	; 0xbf2 <main+0x28c>
			   {
				   LCD_SEND_CHAR((result/100)+48);
 bc0:	c8 01       	movw	r24, r16
 bc2:	b1 01       	movw	r22, r2
 bc4:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 bc8:	86 2f       	mov	r24, r22
 bca:	80 5d       	subi	r24, 0xD0	; 208
 bcc:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result/10)%10+48);
 bd0:	c8 01       	movw	r24, r16
 bd2:	b4 01       	movw	r22, r8
 bd4:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 bd8:	08 2f       	mov	r16, r24
 bda:	cb 01       	movw	r24, r22
 bdc:	b4 01       	movw	r22, r8
 bde:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 be2:	80 5d       	subi	r24, 0xD0	; 208
 be4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result%10)+48);
 be8:	80 2f       	mov	r24, r16
 bea:	80 5d       	subi	r24, 0xD0	; 208
 bec:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 bf0:	cd c0       	rjmp	.+410    	; 0xd8c <main+0x426>
			   }
			   else if(result>=10&&result<100)
 bf2:	c8 01       	movw	r24, r16
 bf4:	0a 97       	sbiw	r24, 0x0a	; 10
 bf6:	8a 35       	cpi	r24, 0x5A	; 90
 bf8:	91 05       	cpc	r25, r1
 bfa:	70 f4       	brcc	.+28     	; 0xc18 <main+0x2b2>
			   {
				   LCD_SEND_CHAR((result/10)+48);
 bfc:	c8 01       	movw	r24, r16
 bfe:	b4 01       	movw	r22, r8
 c00:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 c04:	08 2f       	mov	r16, r24
 c06:	86 2f       	mov	r24, r22
 c08:	80 5d       	subi	r24, 0xD0	; 208
 c0a:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result%10)+48);
 c0e:	80 2f       	mov	r24, r16
 c10:	80 5d       	subi	r24, 0xD0	; 208
 c12:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 c16:	ba c0       	rjmp	.+372    	; 0xd8c <main+0x426>
			   }
			   else if(result <10)
 c18:	0a 30       	cpi	r16, 0x0A	; 10
 c1a:	11 05       	cpc	r17, r1
 c1c:	08 f0       	brcs	.+2      	; 0xc20 <main+0x2ba>
 c1e:	b6 c0       	rjmp	.+364    	; 0xd8c <main+0x426>
			   {
				   LCD_SEND_CHAR((result)+48);
 c20:	80 2f       	mov	r24, r16
 c22:	80 5d       	subi	r24, 0xD0	; 208
 c24:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 c28:	b1 c0       	rjmp	.+354    	; 0xd8c <main+0x426>
			   }
			   break;
			   case '*':
			   result=(arr[counter-3]-48)*(arr[counter-1]-48);
 c2a:	ee ef       	ldi	r30, 0xFE	; 254
 c2c:	ff ef       	ldi	r31, 0xFF	; 255
 c2e:	ec 0f       	add	r30, r28
 c30:	fd 1f       	adc	r31, r29
 c32:	ee 0d       	add	r30, r14
 c34:	ff 1d       	adc	r31, r15
 c36:	80 81       	ld	r24, Z
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	9c 01       	movw	r18, r24
 c3c:	20 53       	subi	r18, 0x30	; 48
 c3e:	30 40       	sbci	r19, 0x00	; 0
 c40:	fe 01       	movw	r30, r28
 c42:	ee 0d       	add	r30, r14
 c44:	ff 1d       	adc	r31, r15
 c46:	80 81       	ld	r24, Z
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	c0 97       	sbiw	r24, 0x30	; 48
 c4c:	28 9f       	mul	r18, r24
 c4e:	80 01       	movw	r16, r0
 c50:	29 9f       	mul	r18, r25
 c52:	10 0d       	add	r17, r0
 c54:	38 9f       	mul	r19, r24
 c56:	10 0d       	add	r17, r0
 c58:	11 24       	eor	r1, r1
			   if(result>=1000&&result<10000)
 c5a:	c8 01       	movw	r24, r16
 c5c:	88 5e       	subi	r24, 0xE8	; 232
 c5e:	93 40       	sbci	r25, 0x03	; 3
 c60:	23 e2       	ldi	r18, 0x23	; 35
 c62:	88 32       	cpi	r24, 0x28	; 40
 c64:	92 07       	cpc	r25, r18
 c66:	28 f5       	brcc	.+74     	; 0xcb2 <main+0x34c>
			   {
				   LCD_SEND_CHAR((result/1000)+48);
 c68:	c8 01       	movw	r24, r16
 c6a:	68 ee       	ldi	r22, 0xE8	; 232
 c6c:	73 e0       	ldi	r23, 0x03	; 3
 c6e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 c72:	86 2f       	mov	r24, r22
 c74:	80 5d       	subi	r24, 0xD0	; 208
 c76:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result/100)%10+48);
 c7a:	c8 01       	movw	r24, r16
 c7c:	b1 01       	movw	r22, r2
 c7e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 c82:	cb 01       	movw	r24, r22
 c84:	b4 01       	movw	r22, r8
 c86:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 c8a:	80 5d       	subi	r24, 0xD0	; 208
 c8c:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result/10)%10+48);
 c90:	c8 01       	movw	r24, r16
 c92:	b4 01       	movw	r22, r8
 c94:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 c98:	08 2f       	mov	r16, r24
 c9a:	cb 01       	movw	r24, r22
 c9c:	b4 01       	movw	r22, r8
 c9e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 ca2:	80 5d       	subi	r24, 0xD0	; 208
 ca4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result%10)+48);
 ca8:	80 2f       	mov	r24, r16
 caa:	80 5d       	subi	r24, 0xD0	; 208
 cac:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 cb0:	6d c0       	rjmp	.+218    	; 0xd8c <main+0x426>
			   {
				   LCD_SEND_CHAR((result/100)+48);
				   LCD_SEND_CHAR((result/10)%10+48);
				   LCD_SEND_CHAR((result%10)+48);
			   }
			   else if (result>=10&&result<100)
 cb2:	c8 01       	movw	r24, r16
 cb4:	0a 97       	sbiw	r24, 0x0a	; 10
 cb6:	8a 35       	cpi	r24, 0x5A	; 90
 cb8:	91 05       	cpc	r25, r1
 cba:	70 f4       	brcc	.+28     	; 0xcd8 <main+0x372>
			   {
				   LCD_SEND_CHAR((result/10)+48);
 cbc:	c8 01       	movw	r24, r16
 cbe:	b4 01       	movw	r22, r8
 cc0:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 cc4:	08 2f       	mov	r16, r24
 cc6:	86 2f       	mov	r24, r22
 cc8:	80 5d       	subi	r24, 0xD0	; 208
 cca:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result%10)+48);
 cce:	80 2f       	mov	r24, r16
 cd0:	80 5d       	subi	r24, 0xD0	; 208
 cd2:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 cd6:	5a c0       	rjmp	.+180    	; 0xd8c <main+0x426>
			   }
			   else if(result <10)
 cd8:	0a 30       	cpi	r16, 0x0A	; 10
 cda:	11 05       	cpc	r17, r1
 cdc:	08 f0       	brcs	.+2      	; 0xce0 <main+0x37a>
 cde:	56 c0       	rjmp	.+172    	; 0xd8c <main+0x426>
			   {
				   LCD_SEND_CHAR((result)+48);
 ce0:	80 2f       	mov	r24, r16
 ce2:	80 5d       	subi	r24, 0xD0	; 208
 ce4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 ce8:	51 c0       	rjmp	.+162    	; 0xd8c <main+0x426>
			   }
			   break;
			   
			   case '/':
			   result=(arr[counter-3]-48)/(arr[counter-1]-48);
 cea:	ee ef       	ldi	r30, 0xFE	; 254
 cec:	ff ef       	ldi	r31, 0xFF	; 255
 cee:	ec 0f       	add	r30, r28
 cf0:	fd 1f       	adc	r31, r29
 cf2:	ee 0d       	add	r30, r14
 cf4:	ff 1d       	adc	r31, r15
 cf6:	80 81       	ld	r24, Z
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	c0 97       	sbiw	r24, 0x30	; 48
 cfc:	fe 01       	movw	r30, r28
 cfe:	ee 0d       	add	r30, r14
 d00:	ff 1d       	adc	r31, r15
 d02:	60 81       	ld	r22, Z
 d04:	70 e0       	ldi	r23, 0x00	; 0
 d06:	60 53       	subi	r22, 0x30	; 48
 d08:	70 40       	sbci	r23, 0x00	; 0
 d0a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divmodhi4>
 d0e:	8b 01       	movw	r16, r22
			   if(result>=100&&result<1000)
 d10:	cb 01       	movw	r24, r22
 d12:	84 56       	subi	r24, 0x64	; 100
 d14:	90 40       	sbci	r25, 0x00	; 0
 d16:	33 e0       	ldi	r19, 0x03	; 3
 d18:	84 38       	cpi	r24, 0x84	; 132
 d1a:	93 07       	cpc	r25, r19
 d1c:	c8 f4       	brcc	.+50     	; 0xd50 <main+0x3ea>
			   {
				   LCD_SEND_CHAR((result/100)+48);
 d1e:	cb 01       	movw	r24, r22
 d20:	b1 01       	movw	r22, r2
 d22:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 d26:	86 2f       	mov	r24, r22
 d28:	80 5d       	subi	r24, 0xD0	; 208
 d2a:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result/10)%10+48);
 d2e:	c8 01       	movw	r24, r16
 d30:	b4 01       	movw	r22, r8
 d32:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 d36:	08 2f       	mov	r16, r24
 d38:	cb 01       	movw	r24, r22
 d3a:	b4 01       	movw	r22, r8
 d3c:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 d40:	80 5d       	subi	r24, 0xD0	; 208
 d42:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result%10)+48);
 d46:	80 2f       	mov	r24, r16
 d48:	80 5d       	subi	r24, 0xD0	; 208
 d4a:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 d4e:	1e c0       	rjmp	.+60     	; 0xd8c <main+0x426>
			   }
			   else if(result>=10&&result<100)
 d50:	cb 01       	movw	r24, r22
 d52:	0a 97       	sbiw	r24, 0x0a	; 10
 d54:	8a 35       	cpi	r24, 0x5A	; 90
 d56:	91 05       	cpc	r25, r1
 d58:	70 f4       	brcc	.+28     	; 0xd76 <main+0x410>
			   {
				   LCD_SEND_CHAR((result/10)+48);
 d5a:	cb 01       	movw	r24, r22
 d5c:	b4 01       	movw	r22, r8
 d5e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodhi4>
 d62:	08 2f       	mov	r16, r24
 d64:	86 2f       	mov	r24, r22
 d66:	80 5d       	subi	r24, 0xD0	; 208
 d68:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
				   LCD_SEND_CHAR((result%10)+48);
 d6c:	80 2f       	mov	r24, r16
 d6e:	80 5d       	subi	r24, 0xD0	; 208
 d70:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 d74:	0b c0       	rjmp	.+22     	; 0xd8c <main+0x426>
			   }
			   else if(result <10)
 d76:	6a 30       	cpi	r22, 0x0A	; 10
 d78:	71 05       	cpc	r23, r1
 d7a:	40 f4       	brcc	.+16     	; 0xd8c <main+0x426>
			   {
				   LCD_SEND_CHAR((result)+48);
 d7c:	86 2f       	mov	r24, r22
 d7e:	80 5d       	subi	r24, 0xD0	; 208
 d80:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_SEND_CHAR>
 d84:	03 c0       	rjmp	.+6      	; 0xd8c <main+0x426>
		   
		   }	       
    
	   }
	 else{
		   LCD_clearscreen();
 d86:	0e 94 88 04 	call	0x910	; 0x910 <LCD_clearscreen>
		   goto label;
 d8a:	08 ce       	rjmp	.-1008   	; 0x99c <main+0x36>
 d8c:	8f ef       	ldi	r24, 0xFF	; 255
 d8e:	94 e3       	ldi	r25, 0x34	; 52
 d90:	ac e0       	ldi	r26, 0x0C	; 12
 d92:	81 50       	subi	r24, 0x01	; 1
 d94:	90 40       	sbci	r25, 0x00	; 0
 d96:	a0 40       	sbci	r26, 0x00	; 0
 d98:	e1 f7       	brne	.-8      	; 0xd92 <main+0x42c>
 d9a:	00 c0       	rjmp	.+0      	; 0xd9c <main+0x436>
 d9c:	00 00       	nop
 d9e:	10 ce       	rjmp	.-992    	; 0x9c0 <main+0x5a>

00000da0 <__udivmodhi4>:
 da0:	aa 1b       	sub	r26, r26
 da2:	bb 1b       	sub	r27, r27
 da4:	51 e1       	ldi	r21, 0x11	; 17
 da6:	07 c0       	rjmp	.+14     	; 0xdb6 <__udivmodhi4_ep>

00000da8 <__udivmodhi4_loop>:
 da8:	aa 1f       	adc	r26, r26
 daa:	bb 1f       	adc	r27, r27
 dac:	a6 17       	cp	r26, r22
 dae:	b7 07       	cpc	r27, r23
 db0:	10 f0       	brcs	.+4      	; 0xdb6 <__udivmodhi4_ep>
 db2:	a6 1b       	sub	r26, r22
 db4:	b7 0b       	sbc	r27, r23

00000db6 <__udivmodhi4_ep>:
 db6:	88 1f       	adc	r24, r24
 db8:	99 1f       	adc	r25, r25
 dba:	5a 95       	dec	r21
 dbc:	a9 f7       	brne	.-22     	; 0xda8 <__udivmodhi4_loop>
 dbe:	80 95       	com	r24
 dc0:	90 95       	com	r25
 dc2:	bc 01       	movw	r22, r24
 dc4:	cd 01       	movw	r24, r26
 dc6:	08 95       	ret

00000dc8 <__divmodhi4>:
 dc8:	97 fb       	bst	r25, 7
 dca:	09 2e       	mov	r0, r25
 dcc:	07 26       	eor	r0, r23
 dce:	0a d0       	rcall	.+20     	; 0xde4 <__divmodhi4_neg1>
 dd0:	77 fd       	sbrc	r23, 7
 dd2:	04 d0       	rcall	.+8      	; 0xddc <__divmodhi4_neg2>
 dd4:	e5 df       	rcall	.-54     	; 0xda0 <__udivmodhi4>
 dd6:	06 d0       	rcall	.+12     	; 0xde4 <__divmodhi4_neg1>
 dd8:	00 20       	and	r0, r0
 dda:	1a f4       	brpl	.+6      	; 0xde2 <__divmodhi4_exit>

00000ddc <__divmodhi4_neg2>:
 ddc:	70 95       	com	r23
 dde:	61 95       	neg	r22
 de0:	7f 4f       	sbci	r23, 0xFF	; 255

00000de2 <__divmodhi4_exit>:
 de2:	08 95       	ret

00000de4 <__divmodhi4_neg1>:
 de4:	f6 f7       	brtc	.-4      	; 0xde2 <__divmodhi4_exit>
 de6:	90 95       	com	r25
 de8:	81 95       	neg	r24
 dea:	9f 4f       	sbci	r25, 0xFF	; 255
 dec:	08 95       	ret

00000dee <_exit>:
 dee:	f8 94       	cli

00000df0 <__stop_program>:
 df0:	ff cf       	rjmp	.-2      	; 0xdf0 <__stop_program>
